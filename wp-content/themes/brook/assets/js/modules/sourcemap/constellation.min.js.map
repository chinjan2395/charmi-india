{"version":3,"sources":["constellation.js","init.js"],"names":["$","window","$window","Constellation","canvas","options","$canvas","context","getContext","defaults","star","color","width","randomWidth","line","position","x","y","innerWidth","height","innerHeight","velocity","length","distance","radius","stars","config","extend","Star","this","Math","random","vx","vy","prototype","create","beginPath","arc","PI","fill","animate","i","iStar","jStar","j","moveTo","lineTo","stroke","closePath","createStars","clearRect","push","setCanvas","setContext","fillStyle","strokeStyle","lineWidth","setInitialPosition","hasOwnProperty","loop","callback","rAF","requestAnimationFrame","bind","handlers","mousemove","e","pageX","offset","left","pageY","top","resize","cancelAnimationFrame","on","unbind","off","init","instantiate","element","fn","constellation","each","self","jQuery","lineColor","data","starColor","children"],"mappings":"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","file":"../../constellation.min.js","sourcesContent":["/*\n * Mantis.js / jQuery / Zepto.js plugin for Constellation\n * @version 1.2.2\n * @author Acau√£ Montiel <contato@acauamontiel.com.br>\n * @license http://acaua.mit-license.org/\n */\n(\n    function ( $, window ) {\n        var $window = $( window );\n\n        /**\n         * Makes a nice constellation on canvas\n         * @constructor Constellation\n         */\n        function Constellation( canvas, options ) {\n            var $canvas  = $( canvas ),\n                context  = canvas.getContext( '2d' ),\n                defaults = {\n                    star: {\n                        color: 'rgba(255, 255, 255, .5)',\n                        width: 1,\n                        randomWidth: true\n                    },\n                    line: {\n                        color: 'rgba(255, 255, 255, .5)',\n                        width: 0.2\n                    },\n                    position: {\n                        x: 0,\n                        y: 0\n                    },\n                    width: window.innerWidth,\n                    height: window.innerHeight,\n                    velocity: 0.1,\n                    length: 100,\n                    distance: 120,\n                    radius: 150,\n                    stars: []\n                },\n                config   = $.extend( true, {}, defaults, options );\n\n            function Star() {\n                this.x = Math.random() * canvas.width;\n                this.y = Math.random() * canvas.height;\n\n                this.vx = (\n                    config.velocity - (\n                        Math.random() * 0.5\n                    )\n                );\n                this.vy = (\n                    config.velocity - (\n                        Math.random() * 0.5\n                    )\n                );\n\n                this.radius = config.star.randomWidth ? (\n                    Math.random() * config.star.width\n                ) : config.star.width;\n            }\n\n            Star.prototype = {\n                create: function () {\n                    context.beginPath();\n                    context.arc( this.x, this.y, this.radius, 0, Math.PI * 2, false );\n                    context.fill();\n                },\n\n                animate: function () {\n                    var i;\n                    for ( i = 0; i < config.length; i ++ ) {\n\n                        var star = config.stars[i];\n\n                        if ( star.y < 0 || star.y > canvas.height ) {\n                            star.vx = star.vx;\n                            star.vy = - star.vy;\n                        } else if ( star.x < 0 || star.x > canvas.width ) {\n                            star.vx = - star.vx;\n                            star.vy = star.vy;\n                        }\n\n                        star.x += star.vx;\n                        star.y += star.vy;\n                    }\n                },\n\n                line: function () {\n                    var length = config.length,\n                        iStar,\n                        jStar,\n                        i,\n                        j;\n\n                    for ( i = 0; i < length; i ++ ) {\n                        for ( j = 0; j < length; j ++ ) {\n                            iStar = config.stars[i];\n                            jStar = config.stars[j];\n\n                            if ( (\n                                     iStar.x - jStar.x\n                                 ) < config.distance && (\n                                                            iStar.y - jStar.y\n                                                        ) < config.distance && (\n                                                                                   iStar.x - jStar.x\n                                                                               ) > - config.distance && (\n                                                                                                            iStar.y - jStar.y\n                                                                                                        ) > - config.distance ) {\n                                if ( (\n                                         iStar.x - config.position.x\n                                     ) < config.radius && (\n                                                              iStar.y - config.position.y\n                                                          ) < config.radius && (\n                                                                                   iStar.x - config.position.x\n                                                                               ) > - config.radius && (\n                                                                                                          iStar.y - config.position.y\n                                                                                                      ) > - config.radius ) {\n                                    context.beginPath();\n                                    context.moveTo( iStar.x, iStar.y );\n                                    context.lineTo( jStar.x, jStar.y );\n                                    context.stroke();\n                                    context.closePath();\n                                }\n                            }\n                        }\n                    }\n                }\n            };\n\n            this.createStars = function () {\n                var length = config.length,\n                    star,\n                    i;\n\n                context.clearRect( 0, 0, canvas.width, canvas.height );\n\n                for ( i = 0; i < length; i ++ ) {\n                    config.stars.push( new Star() );\n                    star = config.stars[i];\n\n                    star.create();\n                }\n\n                star.line();\n                star.animate();\n            };\n\n            this.setCanvas = function () {\n                canvas.width  = config.width;\n                canvas.height = config.height;\n            };\n\n            this.setContext = function () {\n                context.fillStyle   = config.star.color;\n                context.strokeStyle = config.line.color;\n                context.lineWidth   = config.line.width;\n            };\n\n            this.setInitialPosition = function () {\n                if ( ! options || ! options.hasOwnProperty( 'position' ) ) {\n                    config.position = {\n                        x: canvas.width * 0.5,\n                        y: canvas.height * 0.5\n                    };\n                }\n            };\n\n            this.loop = function ( callback ) {\n                callback();\n\n                this.rAF = window.requestAnimationFrame( function () {\n                    //stats.begin();\n                    this.loop( callback );\n                    //stats.end();\n                }.bind( this ) );\n            };\n\n            this.handlers = {\n                window: {\n                    mousemove: function ( e ) {\n                        config.position.x = e.pageX - $canvas.offset().left;\n                        config.position.y = e.pageY - $canvas.offset().top;\n                    },\n                    resize: function () {\n                        window.cancelAnimationFrame( this.rAF );\n                    }\n                }\n            };\n\n            this.bind = function () {\n                $window\n                    .on( 'mousemove', this.handlers.window.mousemove )\n                    .on( 'resize', this.handlers.window.resize.bind( this ) );\n            };\n\n            this.unbind = function () {\n                $window\n                    .off( 'mousemove', this.handlers.window.mousemove )\n                    .off( 'resize', this.handlers.window.resize );\n            };\n\n            this.init = function () {\n                this.setCanvas();\n                this.setContext();\n                this.setInitialPosition();\n                this.loop( this.createStars );\n                this.bind();\n            };\n        }\n\n        function instantiate( element, options ) {\n            var c = new Constellation( element, options );\n            c.init();\n        }\n\n        $.fn.constellation = function ( options ) {\n            return this.each( function () {\n                var self = this;\n                $window.on( 'resize', function () {\n                    instantiate( self, options );\n                } );\n\n                instantiate( this, options );\n            } );\n        };\n    }\n)( window.jQuery, window );\n","(\n    function ( $ ) {\n        'use strict';\n\n        $( window ).on( 'load', function () {\n            $( '.constellation-wrapper' ).each( function () {\n\n                var lineColor = $( this ).data( 'line-color' ) ? $( this )\n                        .data( 'line-color' ) : 'rgba(255, 255, 255, 0.5)',\n                    starColor = $( this ).data( 'star-color' ) ? $( this )\n                        .data( 'star-color' ) : 'rgba(255, 255, 255, 0.5)';\n\n                $( this ).children( 'canvas' ).constellation( {\n                    star: {\n                        color: starColor,\n                        width: 4\n                    },\n                    line: {\n                        color: lineColor\n                    },\n                    length: (\n                        window.innerWidth / 20\n                    ),\n                    radius: (\n                        window.innerWidth / 20\n                    )\n                } );\n            } );\n        } );\n    }( window.jQuery )\n);\n"]}